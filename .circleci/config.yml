version: 2.1

commands:
  build_images:
    steps:
      - run:
          name: "Building Docker image"
          command: |
            docker build -t fcpindi/c-pac:${CIRCLE_BRANCH//\//_} .
            docker save fcpindi/c-pac:${CIRCLE_BRANCH//\//_} | gzip > cpac_docker_image.tar.gz
          no_output_timeout: 5h
      - run:
          name: "Starting local registry"
          command: docker run -d -p 5000:5000 --restart=always --name registry registry:2
      - get_singularity:
          version: 2.5.2
      - set_up_singularity:
          version: 2.5.2
      - run:
          name: "Building Singularity 2 image from Docker image"
          command: |
            docker load < cpac_docker_image.tar.gz
            docker tag fcpindi/c-pac:${CIRCLE_BRANCH//\//_} localhost:5000/fcpindi/c-pac:${CIRCLE_BRANCH//\//_}
            docker push localhost:5000/fcpindi/c-pac:${CIRCLE_BRANCH//\//_}
            SINGULARITY_NOHTTPS=1 singularity build cpac_singularity_image.simg docker://localhost:5000/fcpindi/c-pac:${CIRCLE_BRANCH//\//_}
          no_output_timeout: 5h
      - store_artifacts:
          path: cpac_docker_image.tar.gz
      - store_artifacts:
          path: cpac_singularity_image.simg
          destination: cpac_singularity_image.simg
      - persist_to_workspace:
          root: /home/circleci/
          paths: 
            - project
  check_for_built_images:
    steps:
      - run:
          name: "Checking for locally built images"
          command: |
            if [[ ! -f cpac_docker_image.tar.gz || ! -f cpac_singularity_image.simg ]]
            then
              circleci step halt
            fi
  combine_coverage:
    steps:
      - run:
          name: "Combining and reporting coverage"
          command: |
            coverage combine
            coverage html
  configure_git_user:
    steps:
      - add_ssh_keys:
          fingerprints:
            - "12:bc:f2:e4:31:cc:72:54:54:bc:f5:5b:89:e6:d8:ee"
      - run:
          name: "Configuring git user"
          command: |
            sudo apt-key adv --recv-keys --keyserver keyserver.ubuntu.com 78BD65473CB3BD13
            curl -L https://packagecloud.io/circleci/trusty/gpgkey | sudo apt-key add -
            sudo apt-get update
            sudo apt-get install git -y
            git config --global user.email "${CIRCLE_USERNAME}@users.noreply.github.com"
            git config --global user.name "${CIRCLE_USERNAME} @ CircleCI"
  create_docker_test_container:
    parameters:
      coverage_file:
        description: "Filename for coverage file"
        type: string
        default: .coverage.docker
    steps:
      - load_docker_image
      - run:
          name: "Creating Docker container"
          command: docker run -dit -P -e COVERAGE_FILE=<< parameters.coverage_file >> -v /home/circleci/project/test-results:/code/test-results -v /home/circleci/project:/home/circleci/project -v /home/circleci/project/CPAC/resources/configs/test_configs:/test_configs -v $PWD:/code -v $PWD/dev/circleci_data:$PWD/dev/circleci_data --workdir=/home/circleci/project --entrypoint=/bin/bash --name docker_test fcpindi/c-pac:${CIRCLE_BRANCH//\//_}
  generate_random_run:
    steps:
      - run:
          name: "Generating run command"
          command: python dev/circleci_data/generate_run_command.py
  get_singularity:
    parameters:
      version:
        description: "Version of Singularity to clone"
        type: string
    steps:
      - run: 
          name: "Cloning Singularity << parameters.version >>"
          command: git clone -b << parameters.version >> https://github.com/sylabs/singularity singularity-<< parameters.version >>
  get_workspace:
    steps:
      - attach_workspace:
          at: /home/circleci/
      - run:
          name: "Entering project directory"
          command: cd /home/circleci/project
  install_singularity:
    parameters:
      version:
        description: "Version of Singularity to clone"
        type: string
    steps:
      - get_singularity:
          version: << parameters.version >>
      - set_up_singularity:
          version: << parameters.version >>
  load_docker_image:
    steps:
      - run:
          name: "Loading Docker image"
          command: docker load < cpac_docker_image.tar.gz
  set_python_version:
    parameters:
      version:
        description: "Version of Python to set up"
        type: string
        default: 3.9.0
    steps:
      - run:
          name: "Setting Python Version"
          command: |
            cd /opt/circleci/.pyenv/plugins/python-build/../.. && git pull && cd -
            pyenv install -v << parameters.version >>
            pyenv global << parameters.version >>
            pip install -r dev/circleci_data/requirements.txt
  set_up_singularity:
    parameters:
      version:
        description: "Version of Singularity to set up"
        type: string
        default: v3.6.4
      libssl_version:
        description: "Version of libssl to install"
        type: string
        default: "1.1"
    steps:
      - run:
          name: "Installing Singularity requirements"
          command: sudo apt-get update && sudo apt-get install flawfinder squashfs-tools uuid-dev libuuid1 libffi-dev libssl-dev libssl<< parameters.libssl_version >> libarchive-dev libgpgme11-dev libseccomp-dev -y
      - run:
          name: "Setting up Singularity << parameters.version >>"
          # TODO: Set up Singularity 3
          command: |
            cd singularity-<< parameters.version >>
            ./autogen.sh
            ./configure --prefix=/usr/local --sysconfdir=/etc
            make
            sudo make install
            cd ..

jobs:
  build:
    machine:
      image: ubuntu-2004:202010-01
    steps:
      - checkout
      - set_python_version
      - configure_git_user
      - run:
          name: "Checking if version needs updated"
          # update version if version needs updated, otherwise just move on
          command: |
            COMMIT_MESSAGE=$(git log -1 --pretty=%B)
            if [[ ! "$COMMIT_MESSAGE" == *"Update version to"* ]]
            then
              cd /home/circleci/project/CPAC
              VERSION=$(python -c "from info import __version__; print('.'.join(('.'.join(__version__[::-1].split('-')[1].split('.')[1:])[::-1], __version__.split('-')[1])) if '-' in __version__ else __version__)")
              cd ..
              echo "v${VERSION}" > version
              sed -i -r "s/^(# [Vv]ersion ).*$/# Version ${VERSION}/g" dev/docker_data/default_pipeline.yml
              find ./CPAC/resources/configs -name "*.yml" -exec sed -i -r "s/^(# [Vv]ersion ).*$/# Version ${VERSION}/g" {} \;
              git add version CPAC/resources/configs dev/docker_data/default_pipeline.yml
              if [[ ! -z $(git diff origin/${CIRCLE_BRANCH}) ]]
              then
                git commit -m ":bookmark: Update version to ${VERSION} ($COMMIT_MESSAGE)"
                git push origin HEAD:${CIRCLE_BRANCH} || true
                circleci step halt
              fi
              cd ..
            fi
      - build_images
  clone_singularity_3:
    machine:
      image: ubuntu-2004:202010-01
    steps:
      - get_workspace
      - get_singularity:
          version: v3.6.4
      - persist_to_workspace:
          root: /home/circleci/
          paths: 
            - project
  combine_coverage:
    machine: true
    steps:
      - get_workspace
      - set_python_version
      - combine_coverage
      - store_test_results:        
          path: test-results
      - store_artifacts:
          path: htmlcov
  pytest_docker:
    machine:
      image: ubuntu-2004:202010-01
    steps:
      - get_workspace
      - check_for_built_images
      - set_python_version
      - run:
          name: Getting Sample BIDS Data
          command: git clone https://github.com/bids-standard/bids-examples.git
      - create_docker_test_container
      - run:
          name: "Running unit tests in Docker image"
          command: docker exec docker_test /bin/bash /code/dev/circleci_data/test_in_image.sh
      - store_test_results:
          path: test-results
      - persist_to_workspace:
          root: /home/circleci/
          paths: project/.coverage*
  pytest_singularity_2:
    machine:
      image: ubuntu-1604:202010-01
    steps:
      - get_workspace
      - check_for_built_images
      - set_python_version:
          version: 3.6.3
      - set_up_singularity:
          version: 2.5.2
          libssl_version: 1.0.0
      - run:
          name: "Testing C-PAC installation in Singularity Image"
          command: |
            COVERAGE_FILE=.coverage.singularity-install_2
            coverage run -m pytest --junitxml=test-results/junit.xml --continue-on-collection-errors dev/circleci_data/test_install.py
      - run:
          name: "Running unit tests in Singularity image"
          command: SINGULARITYENV_COVERAGE_FILE=.coverage.singularity_2 singularity exec -B $PWD:/code cpac_singularity_image.simg ./dev/circleci_data/test_in_image.sh
      - store_test_results:
          path: test-results
      - persist_to_workspace:
          root: /home/circleci/
          paths: project/.coverage*
  pytest_singularity_3:
    machine:
      image: ubuntu-2004:202010-01
    steps:
      - get_workspace
      - check_for_built_images
      - set_python_version
      - set_up_singularity:
          version: v3.6.4
      - run:
          name: "Testing C-PAC installation in Singularity Image"
          command: |
            COVERAGE_FILE=.coverage.singularity-install_3
            coverage run -m pytest --junitxml=test-results/junit.xml --continue-on-collection-errors dev/circleci_data/test_install.py
      - run:
          name: "Running unit tests in Singularity image"
          command: SINGULARITYENV_COVERAGE_FILE=.coverage.singularity_3 singularity exec -B $PWD:/code cpac_singularity_image.simg ./dev/circleci_data/test_in_image.sh
      - store_test_results:
          path: test-results
      - persist_to_workspace:
          root: /home/circleci/
          paths: project/.coverage*
  run_docker:
    machine:
      image: ubuntu-2004:202010-01
    steps:
      - get_workspace
      - check_for_built_images
      - set_python_version
      - generate_random_run
      - create_docker_test_container:
          coverage_file: .coverage.docker-run
      - run:
          name: "Running one participant in Docker"
          command: docker exec docker_test dev/circleci_data/run_command.sh
          no_output_timeout: 5h
      - persist_to_workspace:
          root: /home/circleci/
          paths: project/.coverage*
      - store_artifacts:
          path: dev/circleci_data/run_command.sh
      - store_artifacts:
          path: outputs
  run_singularity_2:
    machine:
      image: ubuntu-1604:202010-01
    steps:
      - get_workspace
      - check_for_built_images
      - set_python_version:
          version: 3.6.3
      - set_up_singularity:
          version: 2.5.2
          libssl_version: 1.0.0
      - generate_random_run
      - run:
          name: "Running one participant in Singularity"
          command: SINGULARITYENV_COVERAGE_FILE=.coverage.singularity-test-run_2 singularity exec -H /home/circleci/project -B CPAC/resources/configs/test_configs:/test_configs cpac_singularity_image.simg dev/circleci_data/run_command.sh
          no_output_timeout: 5h
      - persist_to_workspace:
          root: /home/circleci/
          paths: project/.coverage*
      - store_artifacts:
          path: dev/circleci_data/run_command.sh
      - store_artifacts:
          path: outputs
  run_singularity_3:
    machine:
      image: ubuntu-2004:202010-01
    steps:
      - get_workspace
      - check_for_built_images
      - set_python_version
      - set_up_singularity:
          version: v3.6.4
      - generate_random_run
      - run:
          name: "Running one participant in Singularity"
          command: SINGULARITYENV_COVERAGE_FILE=.coverage.singularity-test-run_3 singularity exec -H /home/circleci/project -B CPAC/resources/configs/test_configs:/test_configs cpac_singularity_image.simg dev/circleci_data/run_command.sh
          no_output_timeout: 5h
      - persist_to_workspace:
          root: /home/circleci/
          paths: project/.coverage*
      - store_artifacts:
          path: dev/circleci_data/run_command.sh
      - store_artifacts:
          path: outputs

workflows:
  version: 2
  build_and_test:
    jobs:
      - build
      - combine_coverage:
          requires:
            - pytest_docker
            - pytest_singularity_2
            - run_docker
            - run_singularity_2
      - pytest_docker:
          requires:
            - build
      - pytest_singularity_2:
          requires:
            - build
      - run_docker:
          requires:
            - build
      - run_singularity_2:
          requires:
            - build
